<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>TrueShade Pro — Live Color Detector</title>
  <meta name="description" content="Professional color detector — live camera + upload, continuous tracking, click to pick, copy HEX, history." />
  <style>
    :root{
      --bg1:#071029; --bg2:#0f1724;
      --glass: rgba(255,255,255,0.03);
      --muted: rgba(255,255,255,0.7);
      --accent: linear-gradient(90deg,#7c3aed,#4f46e5);
      --primary:#7c3aed;
      --success:#10b981;
      --danger:#ef4444;
      --radius:14px;
      --ui-font: Inter, system-ui, "Segoe UI", Roboto, Arial;
    }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0;font-family:var(--ui-font);background:linear-gradient(180deg,var(--bg2),var(--bg1));color:#eef2ff;display:flex;align-items:center;justify-content:center;padding:18px}
    .app{width:960px;max-width:96vw;border-radius:18px;padding:18px;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));box-shadow:0 18px 50px rgba(2,6,23,0.7);border:1px solid rgba(255,255,255,0.02)}
    .top{display:flex;align-items:center;gap:12px;margin-bottom:14px}
    .logo{width:46px;height:46px;border-radius:10px;background:linear-gradient(135deg,#7c3aed,#4f46e5);display:flex;align-items:center;justify-content:center;font-weight:800;color:white}
    .title{font-size:18px;font-weight:800}
    .subtitle{font-size:12px;color:var(--muted)}

    .main{display:grid;grid-template-columns:1fr 340px;gap:14px}
    /* left: camera/upload area */
    .stage{background:#000;border-radius:14px;min-height:620px;position:relative;overflow:hidden;border:1px solid rgba(255,255,255,0.03)}
    .controls-bar{display:flex;gap:8px;align-items:center;padding:12px;background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent);border-bottom:1px solid rgba(255,255,255,0.02)}
    .btn{padding:10px 12px;border-radius:10px;background:var(--glass);border:1px solid rgba(255,255,255,0.02);color:#eef2ff;font-weight:700;cursor:pointer;display:inline-flex;gap:8px;align-items:center}
    .btn.primary{background:linear-gradient(90deg,#7c3aed,#4f46e5);box-shadow:0 8px 24px rgba(79,70,229,0.12)}
    .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.04)}
    .mode-switch{margin-left:auto;display:flex;gap:6px;align-items:center}
    .toggle{display:flex;align-items:center;gap:6px;font-size:13px;color:var(--muted)}
    input[type=file]{display:none}

    .stage-body{position:relative;height:520px;display:flex;align-items:center;justify-content:center}
    video, .preview-img, canvas{max-width:100%;width:100%;height:100%;object-fit:cover;display:block}
    .preview-img{display:block;width:100%;height:100%;object-fit:contain;background:#0b0b0b}
    .center-cross{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:84px;height:84px;border-radius:18px;border:2px dashed rgba(255,255,255,0.6);display:flex;align-items:center;justify-content:center;z-index:25;pointer-events:none}
    .center-dot{width:12px;height:12px;border-radius:50%;background:rgba(255,255,255,0.95);box-shadow:0 2px 8px rgba(0,0,0,0.6)}
    .floating-chip{position:absolute;left:50%;transform:translateX(-50%);bottom:78px;background:linear-gradient(90deg, rgba(255,255,255,0.03), rgba(255,255,255,0.015));padding:10px 14px;border-radius:999px;display:flex;align-items:center;gap:12px;border:1px solid rgba(255,255,255,0.02);backdrop-filter: blur(6px);z-index:30;transition:opacity .15s,transform .15s}
    .floating-chip.hidden{opacity:0;transform:translateX(-50%) translateY(8px);pointer-events:none}
    .swatch{width:28px;height:28px;border-radius:8px;border:1px solid rgba(0,0,0,0.2);box-shadow:0 6px 18px rgba(0,0,0,0.5)}
    .fps{font-size:12px;color:var(--muted);margin-left:8px}

    /* magnifier (zoom preview near pointer) */
    .magnifier{
      position:absolute;width:120px;height:120px;border-radius:12px;border:2px solid rgba(255,255,255,0.06);overflow:hidden;z-index:40;display:none;background:#000;
      box-shadow:0 8px 30px rgba(2,6,23,0.6);
    }
    .magnifier canvas{width:100%;height:100%;display:block;transform-origin:center}

    /* right panel: info and history */
    .panel{padding:12px;display:flex;flex-direction:column;gap:12px}
    .card{background:linear-gradient(180deg, rgba(255,255,255,0.015), rgba(255,255,255,0.01));padding:12px;border-radius:12px;border:1px solid rgba(255,255,255,0.02)}
    .big-color{display:flex;gap:12px;align-items:center}
    .big-swatch{width:72px;height:72px;border-radius:12px;border:1px solid rgba(255,255,255,0.02)}
    .big-meta{flex:1}
    .color-name{font-weight:900;font-size:18px}
    .color-sub{font-size:13px;color:var(--muted);margin-top:6px}
    .meta-row{display:flex;gap:8px;align-items:center;margin-top:10px}
    .hex{font-weight:900;background:rgba(255,255,255,0.03);padding:6px 10px;border-radius:8px}
    .copy-small{padding:6px 8px;border-radius:8px;background:rgba(255,255,255,0.03);cursor:pointer;border:1px solid rgba(255,255,255,0.02)}

    .history-list{display:flex;flex-direction:column;gap:8px;max-height:300px;overflow:auto;padding-right:6px}
    .history-item{display:flex;gap:8px;align-items:center;padding:8px;border-radius:8px;background:rgba(0,0,0,0.16);cursor:pointer;border:1px solid rgba(255,255,255,0.02)}
    .hist-swatch{width:48px;height:48px;border-radius:8px;flex-shrink:0}
    .hist-meta{flex:1}
    .hist-name{font-weight:800}
    .hist-sub{font-size:12px;color:var(--muted)}

    .footer-note{font-size:12px;color:var(--muted);text-align:center;margin-top:8px}

    /* responsive */
    @media(max-width:920px){
      .main{grid-template-columns:1fr;gap:12px}
      .stage{order:2}
      .panel{order:1}
    }
  </style>
</head>
<body>
  <div class="app" role="application" aria-label="TrueShade Pro color detector">
    <div class="top">
      <div class="logo">TS</div>
      <div>
        <div class="title">TrueShade Pro</div>
        <div class="subtitle">Live camera + Upload — precise color picking for everyone</div>
      </div>
    </div>

    <div class="main">
      <div class="stage">
        <div class="controls-bar">
          <button class="btn primary" id="startStopBtn">Start Camera</button>
          <button class="btn" id="detectNowBtn">Detect Now</button>

          <label class="btn ghost" for="uploadInput">Upload Image
            <input id="uploadInput" type="file" accept="image/*" aria-label="Upload image" />
          </label>

          <div class="mode-switch">
            <label class="toggle"><input id="modeCamera" name="mode" type="radio" checked> Camera</label>
            <label class="toggle"><input id="modeUpload" name="mode" type="radio"> Upload</label>
            <div style="width:12px"></div>
            <label class="toggle"><input id="continuousToggle" type="checkbox"> Continuous</label>
          </div>

          <div style="margin-left:auto" class="fps" id="fps">— FPS</div>
        </div>

        <div class="stage-body" id="stageBody" aria-live="polite">
          <video id="video" autoplay playsinline style="display:none"></video>
          <img id="previewImg" class="preview-img" alt="Uploaded preview" style="display:none"/>
          <canvas id="buffer" style="display:none"></canvas>

          <div class="center-cross" aria-hidden="true"><div class="center-dot"></div></div>
          <div class="floating-chip hidden" id="floatingChip" aria-atomic="true" role="status">
            <div class="swatch" id="chipSwatch" style="background:#ff0000"></div>
            <div>
              <div style="font-weight:800" id="chipName">Red</div>
              <div style="font-size:13px;color:var(--muted)" id="chipMeta">RGB (255,0,0) · #FF0000</div>
            </div>
          </div>

          <div class="magnifier" id="magnifier" aria-hidden="true">
            <canvas id="magnCanvas"></canvas>
          </div>
        </div>
      </div>

      <div class="panel">
        <div class="card big-color">
          <div class="big-swatch" id="bigSwatch" style="background:#ff0000"></div>
          <div class="big-meta">
            <div class="color-name" id="colorName">Red</div>
            <div class="color-sub" id="colorSub">RGB (255, 0, 0) · HEX #FF0000</div>

            <div class="meta-row">
              <div class="hex" id="hexLabel">#FF0000</div>
              <button class="copy-small" id="copyHex">Copy HEX</button>
              <button class="copy-small" id="exportHistory">Export</button>
            </div>
          </div>
        </div>

        <div class="card">
          <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
            <div style="font-weight:800">History</div>
            <div style="font-size:13px;color:var(--muted)">Click to use · Copy quick</div>
          </div>
          <div class="history-list" id="historyList" aria-live="polite"></div>
        </div>

        <div class="card" style="text-align:center">
          <div style="font-weight:800">Tips</div>
          <div class="footer-note">Use <strong>Continuous</strong> for live tracking. Tap image to pick precise pixel. Works on phones & laptops (HTTPS required for camera).</div>
        </div>
      </div>
    </div>

    <div class="footer-note" style="margin-top:10px">Made with ❤️ — TrueShade Pro</div>
  </div>

  <!-- Screen reader live region -->
  <div aria-live="polite" id="srLive" style="position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;"></div>

  <script>
    // Colors DB (subset; expand as needed)
    const COLORS = [
      ["Black",0,0,0,"#000000"],["Navy",0,0,128,"#000080"],["DarkBlue",0,0,139,"#00008B"],
      ["Blue",0,0,255,"#0000FF"],["Green",0,128,0,"#008000"],["Lime",0,255,0,"#00FF00"],
      ["Teal",0,128,128,"#008080"],["Cyan",0,255,255,"#00FFFF"],["DeepSkyBlue",0,191,255,"#00BFFF"],
      ["Orange",255,165,0,"#FFA500"],["Gold",255,215,0,"#FFD700"],["Yellow",255,255,0,"#FFFF00"],
      ["Purple",128,0,128,"#800080"],["Magenta",255,0,255,"#FF00FF"],["Pink",255,192,203,"#FFC0CB"],
      ["Red",255,0,0,"#FF0000"],["Crimson",220,20,60,"#DC143C"],["Brown",165,42,42,"#A52A2A"],
      ["White",255,255,255,"#FFFFFF"],["Gray",128,128,128,"#808080"],["Silver",192,192,192,"#C0C0C0"],
      ["Maroon",128,0,0,"#800000"],["Olive",128,128,0,"#808000"],["Coral",255,127,80,"#FF7F50"],
      ["Salmon",250,128,114,"#FA8072"],["Beige",245,245,220,"#F5F5DC"],["Turquoise",64,224,208,"#40E0D0"],
      ["DarkGreen",0,100,0,"#006400"],["SaddleBrown",139,69,19,"#8B4513"],["SkyBlue",135,206,235,"#87CEEB"]
    ];

    // DOM refs
    const startStopBtn = document.getElementById('startStopBtn');
    const detectNowBtn = document.getElementById('detectNowBtn');
    const uploadInput = document.getElementById('uploadInput');
    const modeCamera = document.getElementById('modeCamera');
    const modeUpload = document.getElementById('modeUpload');
    const continuousToggle = document.getElementById('continuousToggle');

    const video = document.getElementById('video');
    const previewImg = document.getElementById('previewImg');
    const buffer = document.getElementById('buffer');
    const magnCanvas = document.getElementById('magnCanvas');
    const magnifier = document.getElementById('magnifier');

    const floatingChip = document.getElementById('floatingChip');
    const chipSwatch = document.getElementById('chipSwatch');
    const chipName = document.getElementById('chipName');
    const chipMeta = document.getElementById('chipMeta');

    const bigSwatch = document.getElementById('bigSwatch');
    const colorNameEl = document.getElementById('colorName');
    const colorSubEl = document.getElementById('colorSub');
    const hexLabel = document.getElementById('hexLabel');
    const copyHexBtn = document.getElementById('copyHex');
    const exportBtn = document.getElementById('exportHistory');
    const historyList = document.getElementById('historyList');
    const fpsEl = document.getElementById('fps');
    const srLive = document.getElementById('srLive');

    const stageBody = document.getElementById('stageBody');

    let stream = null;
    let anim = null;
    let lastFrame = performance.now();
    let fpsCounter = {frames:0, lastTime: performance.now()};
    let history = [];

    const bufferCtx = buffer.getContext('2d');
    const magnCtx = magnCanvas.getContext('2d');

    // helpers
    function rgbToHex(r,g,b){ return "#" + [r,g,b].map(v=> v.toString(16).padStart(2,'0')).join('').toUpperCase(); }
    function clamp(v){ return Math.max(0,Math.min(255,Math.round(v))); }

    function findClosestColor(r,g,b){
      let best = {d: Infinity, idx:0};
      for(let i=0;i<COLORS.length;i++){
        const c = COLORS[i];
        const dr=c[1]-r, dg=c[2]-g, db=c[3]-b;
        const d = dr*dr + dg*dg + db*db;
        if(d < best.d){ best.d = d; best.idx = i; }
      }
      const c = COLORS[best.idx];
      return {name:c[0],r:c[1],g:c[2],b:c[3],hex:c[4],dist: Math.sqrt(best.d)};
    }

    function updateDisplay(r,g,b){
      const hex = rgbToHex(r,g,b);
      const found = findClosestColor(r,g,b);
      colorNameEl.textContent = found.name;
      colorSubEl.textContent = `RGB (${r}, ${g}, ${b}) · HEX ${hex}`;
      hexLabel.textContent = hex;
      bigSwatch.style.background = `rgb(${r}, ${g}, ${b})`;
      chipSwatch.style.background = `rgb(${r}, ${g}, ${b})`;
      chipName.textContent = found.name;
      chipMeta.textContent = `RGB (${r}, ${g}, ${b}) · ${hex}`;

      // announce to screen reader
      srLive.textContent = `Detected ${found.name}, ${hex}, RGB ${r} ${g} ${b}`;

      // auto-save to history if toggled
      if(document.querySelector('#autoHistoryToggle')?.checked !== false){
        pushHistory(found.name, r,g,b, hex);
      }
    }

    function pushHistory(name,r,g,b,hex){
      // remove duplicates at top
      history.unshift({name,r,g,b,hex,time:new Date().toISOString()});
      if(history.length>12) history.length=12;
      renderHistory();
    }

    function renderHistory(){
      historyList.innerHTML = '';
      for(let i=0;i<history.length;i++){
        const h = history[i];
        const item = document.createElement('div');
        item.className = 'history-item';
        item.innerHTML = `<div class="hist-swatch" style="background:${h.hex}"></div>
                          <div class="hist-meta"><div class="hist-name">${h.name}</div><div class="hist-sub">${h.hex} · ${h.time.split('T')[1].slice(0,8)}</div></div>
                          <button class="copy-small" data-idx="${i}">Copy</button>`;
        item.addEventListener('click', (ev)=>{
          if(ev.target && ev.target.matches('button.copy-small')) return;
          updateDisplay(h.r,h.g,h.b);
        });
        item.querySelector('button.copy-small').addEventListener('click', (ev)=>{
          ev.stopPropagation();
          navigator.clipboard.writeText(h.hex).then(()=> {
            const btn = ev.target;
            const old = btn.textContent; btn.textContent = 'Copied';
            setTimeout(()=> btn.textContent = old,900);
          });
        });
        historyList.appendChild(item);
      }
    }

    // camera control
    async function startCamera(){
      try{
        stream = await navigator.mediaDevices.getUserMedia({video:{facingMode:'environment'}, audio:false});
        video.srcObject = stream;
        video.style.display = '';
        previewImg.style.display = 'none';
        startStopBtn.textContent = 'Stop Camera';
        setupDetectLoop();
      }catch(err){
        alert('Camera access denied or not available. Use upload instead.');
        console.error(err);
      }
    }

    function stopCamera(){
      if(stream){
        stream.getTracks().forEach(t=> t.stop());
        stream = null;
      }
      video.srcObject = null;
      video.style.display = 'none';
      startStopBtn.textContent = 'Start Camera';
      cancelAnimationFrame(anim); anim = null;
      fpsEl.textContent = '— FPS';
    }

    startStopBtn.addEventListener('click', ()=>{
      if(!stream) startCamera(); else stopCamera();
    });

    // detection loop
    function setupDetectLoop(){
      if(anim) return;
      const loop = (t)=>{
        anim = requestAnimationFrame(loop);
        // fps
        fpsCounter.frames++;
        const elapsed = t - fpsCounter.lastTime;
        if(elapsed > 500){
          const fps = Math.round((fpsCounter.frames/(elapsed/1000)));
          fpsEl.textContent = `${fps} FPS`;
          fpsCounter.lastTime = t; fpsCounter.frames = 0;
        }

        // continuous detection
        if(continuousToggle.checked){
          detectCenter();
        }
      };
      anim = requestAnimationFrame(loop);
    }

    // detect center pixel from video or preview
    function detectCenter(){
      if(stream && video.videoWidth){
        buffer.width = video.videoWidth; buffer.height = video.videoHeight;
        bufferCtx.drawImage(video,0,0,buffer.width,buffer.height);
        const cx = Math.floor(buffer.width/2), cy = Math.floor(buffer.height/2);
        const p = bufferCtx.getImageData(cx,cy,1,1).data;
        updateDisplay(p[0],p[1],p[2]);
        showFloating();
      } else if(previewImg.style.display !== 'none'){
        buffer.width = previewImg.naturalWidth || previewImg.width;
        buffer.height = previewImg.naturalHeight || previewImg.height;
        bufferCtx.drawImage(previewImg,0,0,buffer.width,buffer.height);
        const cx = Math.floor(buffer.width/2), cy = Math.floor(buffer.height/2);
        const p = bufferCtx.getImageData(cx,cy,1,1).data;
        updateDisplay(p[0],p[1],p[2]);
        showFloating();
      }
    }

    function showFloating(){
      floatingChip.classList.remove('hidden');
      clearTimeout(floatingChip._hide);
      floatingChip._hide = setTimeout(()=> floatingChip.classList.add('hidden'), 1100);
    }

    detectNowBtn.addEventListener('click', ()=>{
      detectCenter();
      if(!anim && stream) setupDetectLoop();
    });

    // file upload
    uploadInput.addEventListener('change', (ev)=>{
      const f = ev.target.files[0];
      if(!f) return;
      const url = URL.createObjectURL(f);
      previewImg.onload = ()=>{
        previewImg.style.display = '';
        video.style.display = 'none';
        modeUpload.checked = true;
        modeCamera.checked = false;
        // draw to buffer and detect center
        buffer.width = previewImg.naturalWidth;
        buffer.height = previewImg.naturalHeight;
        bufferCtx.drawImage(previewImg,0,0);
        detectCenter(); // center on uploaded
      };
      previewImg.onerror = ()=> alert('Failed to load image');
      previewImg.src = url;
    });

    // tap-to-pick / magnifier
    let isPointerDown = false;
    stageBody.addEventListener('mousemove', (e)=>{
      // show magnifier near pointer if upload image or video ready
      const rect = stageBody.getBoundingClientRect();
      const x = e.clientX - rect.left, y = e.clientY - rect.top;
      const show = (previewImg.style.display !== 'none') || (video.style.display !== 'none' && video.videoWidth);
      if(!show){ magnifier.style.display = 'none'; return; }
      magnifier.style.display = 'block';
      // position magnifier (avoid going off-screen)
      let left = e.clientX + 14;
      if(left + magnifier.offsetWidth > window.innerWidth - 24) left = e.clientX - magnifier.offsetWidth - 14;
      magnifier.style.left = left + 'px';
      magnifier.style.top = (e.clientY - magnifier.offsetHeight/2) + 'px';

      // prepare magnifier canvas: draw scaled area from buffer
      const displayW = stageBody.clientWidth, displayH = stageBody.clientHeight;
      // buffer sizes may be different; compute scale
      const bufW = buffer.width || (video.videoWidth || displayW), bufH = buffer.height || (video.videoHeight || displayH);
      const scaleX = bufW / displayW;
      const scaleY = bufH / displayH;
      const sampleSize = 60; // pixels in buffer to sample
      const bx = Math.floor(x * scaleX - sampleSize/2);
      const by = Math.floor(y * scaleY - sampleSize/2);
      magnCanvas.width = 120; magnCanvas.height = 120;
      try{
        const sx = Math.max(0, bx), sy = Math.max(0, by);
        const sWidth = Math.min(sampleSize, bufW - sx), sHeight = Math.min(sampleSize, bufH - sy);
        magnCtx.imageSmoothingEnabled = false;
        magnCtx.clearRect(0,0,magnCanvas.width,magnCanvas.height);
        magnCtx.drawImage(buffer, sx, sy, sWidth, sHeight, 0,0, magnCanvas.width, magnCanvas.height);
        // draw center marker
        magnCtx.strokeStyle = 'rgba(255,255,255,0.9)'; magnCtx.lineWidth = 2;
        magnCtx.beginPath(); magnCtx.moveTo(60,0); magnCtx.lineTo(60,120); magnCtx.moveTo(0,60); magnCtx.lineTo(120,60); magnCtx.stroke();
      }catch(e){
        // ignore if buffer not ready
      }
    });

    stageBody.addEventListener('mouseleave', ()=> { magnifier.style.display = 'none'; });

    stageBody.addEventListener('click', (e)=>{
      // map click to buffer coords and get pixel
      const rect = stageBody.getBoundingClientRect();
      const x = e.clientX - rect.left, y = e.clientY - rect.top;
      const displayW = stageBody.clientWidth, displayH = stageBody.clientHeight;
      const bufW = buffer.width || (video.videoWidth || displayW), bufH = buffer.height || (video.videoHeight || displayH);
      const scaleX = bufW / displayW, scaleY = bufH / displayH;
      const bx = Math.floor(x * scaleX), by = Math.floor(y * scaleY);
      try{
        const p = bufferCtx.getImageData(bx, by,1,1).data;
        updateDisplay(p[0], p[1], p[2]);
        showFloating();
      }catch(err){
        // maybe buffer empty — try to copy a frame then detect
        if(stream && video.videoWidth){
          buffer.width = video.videoWidth; buffer.height = video.videoHeight;
          bufferCtx.drawImage(video,0,0);
          const cx = Math.floor(bx), cy = Math.floor(by);
          try{
            const p = bufferCtx.getImageData(cx,cy,1,1).data;
            updateDisplay(p[0],p[1],p[2]);
            showFloating();
          }catch(e){}
        }
      }
    });

    // copy hex
    copyHexBtn.addEventListener('click', ()=>{
      const txt = hexLabel.textContent.trim();
      navigator.clipboard.writeText(txt).then(()=> {
        copyHexBtn.textContent = 'Copied';
        setTimeout(()=> copyHexBtn.textContent = 'Copy HEX',900);
      });
    });

    // export history
    exportBtn.addEventListener('click', ()=>{
      const blob = new Blob([JSON.stringify(history, null, 2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = 'trueShade_history.json'; a.click();
      URL.revokeObjectURL(url);
    });

    // stop camera on unload
    window.addEventListener('beforeunload', ()=> { if(stream) stopCamera(); });

    // helpful first-run tip
    setTimeout(()=> {
      if(!localStorage.getItem('ts_seen')){
        alert('Tip: Click Start Camera and enable Continuous for live tracking. Upload lets you pick pixel precisely.');
        localStorage.setItem('ts_seen','1');
      }
    },700);

    // ensure buffer kept updated when video playing
    video.addEventListener('play', function(){
      const tick = ()=>{
        if(video.paused || video.ended) return;
        if(video.videoWidth){
          buffer.width = video.videoWidth; buffer.height = video.videoHeight;
          bufferCtx.drawImage(video,0,0, buffer.width, buffer.height);
        }
        requestAnimationFrame(tick);
      };
      requestAnimationFrame(tick);
    });

    // accessibility: keyboard shortcuts
    window.addEventListener('keydown', (e)=>{
      if(e.key === ' '){ e.preventDefault(); detectCenter(); }
      if(e.key === 'c'){ continuousToggle.checked = !continuousToggle.checked; }
    });

  </script>
</body>
</html>
